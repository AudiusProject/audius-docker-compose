version: "3.9"

services:
  caddy:
    image: audius/caddy:2.7.4
    container_name: caddy
    restart: unless-stopped
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - ddex-network
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

  ddex-web:
    image: audius/ddex-web:${TAG:-8db7400ba30042a8b35f942a4d04c86f2f05255f}
    container_name: ddex-web
    restart: unless-stopped
    depends_on:
      ddex-mongo-init:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=${NETWORK:-prod}
      - DDEX_PORT=9000
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    healthcheck:
      test: curl --fail -I http://localhost:9000/api/health_check || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - ddex-network

  ddex-crawler:
    image: audius/ddex-ingester:${TAG:-8db7400ba30042a8b35f942a4d04c86f2f05255f}
    container_name: ddex-crawler
    depends_on:
      ddex-mongo-init:
        condition: service_completed_successfully
    environment:
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    entrypoint: ./ingester --service crawler
    networks:
      - ddex-network

  ddex-indexer:
    image: audius/ddex-ingester:${TAG:-8db7400ba30042a8b35f942a4d04c86f2f05255f}
    container_name: ddex-indexer
    depends_on:
      ddex-mongo-init:
        condition: service_completed_successfully
    environment:
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    entrypoint: ./ingester --service indexer
    networks:
      - ddex-network

  ddex-parser:
    image: audius/ddex-ingester:${TAG:-8db7400ba30042a8b35f942a4d04c86f2f05255f}
    container_name: ddex-parser
    depends_on:
      ddex-mongo-init:
        condition: service_completed_successfully
    environment:
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    entrypoint: ./ingester --service parser
    networks:
      - ddex-network

  ddex-publisher:
    image: audius/ddex-publisher:${TAG:-8db7400ba30042a8b35f942a4d04c86f2f05255f}
    container_name: ddex-publisher
    environment:
      - NODE_ENV=${NETWORK:-prod}
      - DDEX_PORT=9001
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    depends_on:
      ddex-mongo-init:
        condition: service_completed_successfully
    ports:
      - "9001:9001"
    healthcheck:
      test: curl --fail -I http://localhost:9001/api/health_check || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - ddex-network

  ddex-mongo:
    image: mongo:6.0.13
    container_name: ddex-mongo
    restart: always
    volumes:
      - /var/k8s/ddex-mongo-db:/data/db
      - ./mongo-keyfile:/etc/mongo-keyfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    entrypoint: >
      bash -c '
        chmod 400 /etc/mongo-keyfile
        chown 999:999 /etc/mongo-keyfile
        exec docker-entrypoint.sh "$$@"
      '
    command: mongod --replSet rs0 --bind_ip_all --keyFile /etc/mongo-keyfile
    ports:
      - "27017:27017"
    healthcheck:
      test: >
        bash -c 'mongosh --quiet --username "$$MONGO_INITDB_ROOT_USERNAME" --password "$$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "
          var ping = db.runCommand({ping: 1});
          if (!ping.ok) {
            exit(1);  // Unhealthy: MongoDB server not responding
          }
          exit(0);  // Healthy: MongoDB server is up (replica set status will be checked by ddex-mongo-init)
        "' localhost:27017/ddex
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    networks:
      - ddex-network
  
  ddex-mongo-init:
    container_name: ddex-mongo-init
    image: mongo:6.0.13
    restart: "no"
    command: >
      bash -c "
        until mongosh --host ddex-mongo:27017 --authenticationDatabase admin -u mongo -p mongo --eval 'db.runCommand({ping: 1})'; do
          echo 'Waiting for ddex-mongo...'
          sleep 2
        done
        mongosh --host ddex-mongo:27017 --authenticationDatabase admin -u mongo -p mongo --eval '
          var rsConfig = {
            _id: \"rs0\",
            members: [{ _id: 0, host: \"ddex-mongo:27017\" }]
          };
          if (db.isMaster().ismaster) {
            print(\"Replica set already initiated.\");
            quit(0);
          }
          else {
            var result = rs.initiate(rsConfig);
            if (result.ok) {
              print(\"Replica set initiated.\");
              quit(0);
            }
            else {
              print(\"Failed to initiate replica set.\");
              quit(1);
            }
          }
        '
      "
    networks:
      - ddex-network
    depends_on:
      - ddex-mongo
  
  vector:
    extends:
      file: ../common-services.yml
      service: vector
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - ddex-network

networks:
  ddex-network:

volumes:
  caddy_data:
  caddy_config:
