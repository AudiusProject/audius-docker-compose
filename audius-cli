#!/usr/bin/env python

import json
import os
import subprocess
import sys
import urllib.error
import urllib.request

import click
import psutil

DEFAULT_MANIFESTS_PATH = os.getenv(
    "MANIFESTS_PATH", os.path.expanduser("~/audius-k8s-manifests")
)

RECOMMENDED_CPU_COUNT = 8
RECOMMENDED_MEMORY = 16

SERVICE_PORTS = {
    "discovery-provider": "5000",
    "creator-node": "4000",
    "identity-server": "7000",
}

service_type = click.Choice(["creator-node", "discovery-provider", "identity"])
container_type = click.Choice(["backend", "cache", "db"])


@click.group()
@click.option(
    "-m",
    "--manifests-path",
    default=DEFAULT_MANIFESTS_PATH,
    help="Path to the manifests directory, if not specified, the value of the MANIFESTS_PATH environment variable, or ~/audius-k8s-manifests if neither is specified.",
)
@click.pass_context
def cli(ctx, manifests_path):
    """A tool for managing audius services"""
    ctx.ensure_object(dict)
    ctx.obj["manifests_path"] = manifests_path


@cli.command()
@click.argument("service", type=service_type)
def check_config(service):
    """Check the config for a service"""
    pass


@cli.command()
@click.argument("service", type=service_type)
@click.pass_context
def health_check(ctx, service):
    """Check the health of a service"""
    proc = subprocess.run(
        [
            "docker-compose",
            "--project-directory",
            ctx.obj["manifests_path"],
            "ps",
            "-q",
            f"{service}-backend",
        ],
        capture_output=True,
    )

    if proc.returncode:
        click.secho("Service is not running", fg="yellow")
        sys.exit(1)

    try:
        response = json.load(
            urllib.request.urlopen(
                f"http://localhost:{SERVICE_PORTS[service]}/health_check"
            )
        )

        if service == "creator-node":
            healthy = response["data"]["healthy"]
        elif service == "discovery-provider":
            healthy = (
                response["data"]["block_difference"]
                < response["data"]["maximum_healthy_block_difference"]
            )
        elif service == "identity":
            healthy = response["healthy"]

        if healthy:
            click.secho("Service is healthy", fg="green")
            sys.exit(0)
        else:
            click.secho("Service is not healthy", fg="red")
            sys.exit(1)
    except (ConnectionError, urllib.error.HTTPError, json.JSONDecodeError):
        click.secho("Service is not healthy", fg="red")
        sys.exit(1)


@cli.command()
@click.argument("service", type=service_type)
@click.pass_context
def launch(ctx, service):
    """Launch the service"""
    try:
        ctx.forward(check_config)
    except SystemExit:
        pass

    total_memory = psutil.virtual_memory().total // (1024 ** 3)
    cpu_count = psutil.cpu_count()

    click.echo(f"CPUs:\t{cpu_count}\t(recommended: {RECOMMENDED_CPU_COUNT})")
    click.echo(f"Memory:\t{total_memory}GB\t(recommended: {RECOMMENDED_MEMORY}GB)")

    if cpu_count < RECOMMENDED_CPU_COUNT or total_memory < RECOMMENDED_MEMORY:
        click.secho("System does not meet recommended requirements", fg="red")
    else:
        click.secho("System meets recommended requirements", fg="green")

    click.confirm(click.style("Do you want to continue?", bold=True), abort=True)

    subprocess.run(
        [
            "docker-compose",
            "--project-directory",
            ctx.obj["manifests_path"],
            "--profile",
            service,
            "up",
            "-d",
        ],
    )


@cli.command()
@click.argument("service", type=service_type)
@click.argument("containers", type=container_type)
@click.pass_context
def logs(ctx, service, containers):
    """Get logs for a service/container"""
    containers = [f"{service}-{container}" for container in containers]
    subprocess.run(
        [
            "docker-compose",
            "--project-directory",
            ctx.obj["manifests_path"],
            "--profile",
            service,
            "logs",
            "-f",
            *containers,
        ],
    )


@cli.command()
@click.argument("service", type=service_type, required=False)
@click.argument("containers", type=container_type, nargs=-1)
@click.pass_context
def restart(ctx, service, containers):
    """Restart a service/container"""
    if service:
        containers = [f"{service}-{container}" for container in containers]
        subprocess.run(
            [
                "docker-compose",
                "--project-directory",
                ctx.obj["manifests_path"],
                "--profile",
                service,
                "restart",
                *containers,
            ],
        )
    else:
        subprocess.run(
            [
                "docker-compose",
                "--project-directory",
                ctx.obj["manifests_path"],
                "restart",
            ],
        )


@cli.command()
@click.argument("key", required=False)
@click.argument("value", required=False)
@cli.pass_context
def set_config(ctx, key, value):
    """Set a config value"""
    if key is None:
        key = click.prompt(click.style("Key", bold=True))
    if value is None:
        value = click.prompt(click.style("Value", bold=True))

    with open(os.path.join(ctx.obj["manifests_path"], ".env"), "a") as fp:
        fp.write(f"{key}={repr(value)}\n")


@cli.command()
@click.argument("branch", required=False)
@cli.pass_context
def pull(ctx, branch):
    """TODO"""
    try:
        subprocess.run(["git", "fetch"], check=True, cwd=ctx.obj["manifest_path"])
        if branch:
            subprocess.run(
                ["git", "checkout", branch], check=True, cwd=ctx.obj["manifest_path"]
            )
        subprocess.run(["git", "pull"], check=True, cwd=ctx.obj["manifest_path"])
    except subprocess.CalledProcessError:
        click.secho("Could not pull", fg="red")
        sys.exit(1)


@cli.command()
@click.argument("branch", required=False)
@click.pass_context
def upgrade(ctx, branch):
    """TODO"""
    ctx.forward(pull)
    ctx.invoke(restart)


if __name__ == "__main__":
    cli(obj={DEFAULT_MANIFESTS_PATH})
