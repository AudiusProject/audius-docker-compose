#!/usr/bin/env python3

# Terminology:
# | audius-cli | docker-compose |
# +------------+----------------+
# | service    | project        |
# | container  | service        |

import argparse


def check_config(service):
    pass


def health_check(service):
    pass


def launch(service, seed_job):
    pass


def logs(service, container):
    pass


def restart(service, container):
    pass


def main():
    parser = argparse.ArgumentParser(description="A tool for managing audius services")

    commands = parser.add_subparsers(
        required=True,
        help="Run '%(prog)s <command> --help' for more information on a command",
        metavar="<command>",
    )

    # check-config command
    check_config_parser = commands.add_parser(
        "check-config",
        help="Check the configuration file for unset keys",
        description="Check the configuration file for unset keys",
    )

    check_config_parser.add_argument(
        "service",
        help="The service to check configuration for (choices: %(choices)s)",
        choices=["creator-node", "discovery-provider", "identity"],
        metavar="<service>",
    )

    check_config_parser.set_defaults(func=check_config)

    # health-check command
    health_check_parser = commands.add_parser(
        "health-check",
        help="Check the health of the services",
        description="Check the health of the services",
    )

    health_check_parser.add_argument(
        "service",
        help="The service to check health of (choices: %(choices)s)",
        choices=["creator-node", "discovery-provider", "identity"],
        metavar="<service>",
    )

    health_check_parser.set_defaults(func=health_check)

    # launch command
    launch_parser = commands.add_parser(
        "launch",
        help="Launch a service",
        description="Launch a service",
    )

    launch_parser.add_argument(
        "-s",
        "--seed-job",
        action="store_true",
        help="Run seed job when launching discovery provider",
    )

    launch_parser.add_argument(
        "service",
        help="The service to launch (choices: %(choices)s)",
        choices=["creator-node", "discovery-provider", "identity"],
        metavar="<service>",
    )

    launch_parser.set_defaults(func=launch)

    # logs command
    logs_parser = commands.add_parser(
        "logs",
        help="View logs for a service",
        description="View logs for a service/container",
    )

    logs_parser.add_argument(
        "service",
        help="The service to view logs for (choices: %(choices)s)",
        choices=["creator-node", "discovery-provider", "identity"],
        metavar="<service>",
    )

    logs_parser.add_argument(
        "container",
        nargs="?",
        help="The container to view logs for (choices: %(choices)s)",
        choices=["db", "cache", "backend"],
        metavar="<container>",
    )

    logs_parser.set_defaults(func=logs)

    # restart command
    restart_parser = commands.add_parser(
        "restart",
        help="Restart a service/container",
        description="Restart a service/container",
    )

    restart_parser.add_argument(
        "service",
        help="The service to restart (choices: %(choices)s)",
        choices=["creator-node", "discovery-provider", "identity"],
        metavar="<service>",
    )

    restart_parser.add_argument(
        "container",
        nargs="?",
        help="The container to restart (choices: %(choices)s)",
        choices=["db", "cache", "backend"],
        metavar="<container>",
    )

    restart_parser.set_defaults(func=restart)

    # pull command
    pull_parser = commands.add_parser(
        "pull",
        help="Pull the latest images for the services",
        description="Pull the latest images for the services",
    )

    # parse arguments and execute associated function
    args = parser.parse_args()
    func = args.__dict__.pop("func")
    func(**args.__dict__)


if __name__ == "__main__":
    main()
