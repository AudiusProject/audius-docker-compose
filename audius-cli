#!/usr/bin/env python3

import json
import logging
import os
import pathlib
import random
import shutil
import subprocess
import sys
import urllib.error
import urllib.request

import click
import crontab
import dotenv
import psutil

GB = 1024 ** 3

RECOMMENDED_CPU_COUNT = 8
RECOMMENDED_MEMORY = 16 * GB
RECOMMENDED_STORAGE = {
    "creator-node": 2048 * GB,
    "discovery-provider": 256 * GB,
    "identity-service": 256 * GB,
}

SERVICE_PORTS = {
    "discovery-provider": "5000",
    "creator-node": "4000",
    "identity-service": "7000",
}

SERVICES = ("creator-node", "discovery-provider", "identity-service")

# Used for updating chainspec
EXTRA_VANITY = "0x22466c6578692069732061207468696e6722202d204166726900000000000000"
EXTRA_SEAL = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

service_type = click.Choice(SERVICES)
network_type = click.Choice(["prod", "stage"])
container_type = click.Choice(["backend", "cache", "db"])


def get_network(ctx, service):
    """Returns the network name for the given service."""
    return dotenv.dotenv_values(ctx.obj["manifests_path"] / service / ".env").get(
        "NETWORK", "prod"
    )


@click.group()
@click.pass_context
def cli(ctx):
    """A tool for managing audius services"""
    ctx.ensure_object(dict)
    ctx.obj["manifests_path"] = pathlib.Path(
        os.getenv("MANIFESTS_PATH", os.path.dirname(os.path.realpath(__file__)))
    )

    logging.basicConfig(
        filename=ctx.obj["manifests_path"] / "audius-cli.log",
        level=logging.INFO,
        format="%(asctime)s:%(levelname)s:%(message)s",
    )


@cli.command()
@click.argument("service", type=service_type)
@click.pass_context
def check_config(ctx, service):
    """Check the config for a service"""
    env = ctx.obj["manifests_path"] / service / f"{get_network(ctx, service)}.env"
    override_env = ctx.obj["manifests_path"] / service / "override.env"

    env_data = dotenv.dotenv_values(env)
    override_env_data = dotenv.dotenv_values(override_env)

    unset = False
    for key, value in env_data.items():
        if override_env_data.get(key, value) == "":
            unset = True
            click.secho(f"{key} is not set", fg="red")

    if unset:
        sys.exit(1)
    else:
        click.secho("All keys are set", fg="green")


@cli.command()
@click.argument("service", type=service_type)
@click.pass_context
def health_check(ctx, service):
    """Check the health of a service"""
    proc = subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            ctx.obj["manifests_path"] / service,
            "ps",
            "-q",
            "backend",
        ],
        capture_output=True,
    )

    if proc.returncode:
        click.secho("Service is not running", fg="yellow")
        sys.exit(1)

    try:
        response = json.load(
            urllib.request.urlopen(
                f"http://localhost:{SERVICE_PORTS[service]}/health_check"
            )
        )

        click.secho("Response:", bold=True)
        click.echo(json.dumps(response, indent=2, sort_keys=True))

        partial = False
        if service == "creator-node":
            healthy = response["data"]["healthy"]
        elif service == "discovery-provider":
            healthy = "block_difference" in response["data"]
            block_diff = response["data"]["block_difference"]
            max_block_diff = response["data"]["maximum_healthy_block_difference"]
            partial = block_diff > max_block_diff
            if block_diff > max_block_diff:
                click.secho(
                    f"Block difference ({block_diff}) is greater than maximum healthy block difference ({max_block_diff})",
                    fg="yellow",
                )
        elif service == "identity-service":
            healthy = response["healthy"]

        if healthy and partial:
            click.secho("Service is partially healthy", fg="yellow")
            sys.exit(2)
        elif healthy:
            click.secho("Service is healthy", fg="green")
            sys.exit(0)
        else:
            click.secho("Service is not healthy", fg="red")
            sys.exit(1)
    except (ConnectionError, urllib.error.HTTPError, json.JSONDecodeError):
        click.secho("Service is not healthy", fg="red")
        sys.exit(1)


@cli.command()
@click.option("-y", "--yes", is_flag=True)
@click.option("--seed", is_flag=True)
@click.argument("service", type=service_type)
@click.pass_context
def launch(ctx, service, seed, yes):
    """Launch the service"""
    try:
        ctx.invoke(check_config, service=service)
    except SystemExit:
        pass
    network = get_network(ctx, service)
    total_memory = psutil.virtual_memory().total
    cpu_count = psutil.cpu_count()
    total_storage = shutil.disk_usage("/var/k8s").total

    click.echo(f"CPUs:\t{cpu_count}\t(required: {RECOMMENDED_CPU_COUNT})")
    click.echo(
        f"Memory:\t{total_memory // GB}GB\t(required: {RECOMMENDED_MEMORY // GB}GB)"
    )
    click.echo(
        f"Storage:\t{total_storage // GB}GB\t(required: {RECOMMENDED_STORAGE[service] // GB}GB)"
    )

    if (
        cpu_count < RECOMMENDED_CPU_COUNT
        or total_memory < RECOMMENDED_MEMORY
        or total_storage < RECOMMENDED_STORAGE[service]
    ):
        click.secho("System does not meet requirements", fg="red")
    else:
        click.secho("System meets requirements", fg="green")

    if not yes:
        click.confirm(click.style("Do you want to continue?", bold=True), abort=True)

    subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            ctx.obj["manifests_path"] / service,
            "pull",
        ],
    )

    if seed and service == "discovery-provider":
        # make sure backend is not running
        subprocess.run(
            [
                "docker",
                "compose",
                "--project-directory",
                ctx.obj["manifests_path"] / "discovery-provider",
                "down",
                "backend",
            ],
        )

        click.secho("Seeding the discovery provider", fg="yellow")
        subprocess.run(
            [
                "docker",
                "compose",
                "--project-directory",
                ctx.obj["manifests_path"] / "discovery-provider",
                "run",
                "seed",
            ],
        )

    if network == "stage" and service == "discovery-provider":
        ctx.invoke(update_chainspec)
        subprocess.run(
            [
                "docker",
                "compose",
                "--env-file",
                ctx.obj["manifests_path"] / "discovery-provider" / "override.env",
                "--project-directory",
                ctx.obj["manifests_path"] / "discovery-provider",
                "up",
                "-d",
                "chain",
            ],
        )
        return

    subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            ctx.obj["manifests_path"] / service,
            "up",
            "-d",
        ],
    )

    subprocess.run(
        [
            "docker",
            "image",
            "prune",
            "--all",
            "--force",
        ],
    )


@cli.command()
@click.argument("service", type=service_type)
@click.argument("containers", type=container_type, nargs=-1)
@click.pass_context
def logs(ctx, service, containers):
    """Get logs for a service/container"""
    subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            ctx.obj["manifests_path"] / service,
            "logs",
            "-f",
            *containers,
        ],
    )


@cli.command()
@click.argument("service", type=service_type, required=False)
@click.argument("containers", type=container_type, nargs=-1)
@click.pass_context
def restart(ctx, service, containers):
    """Restart a service/container"""
    services = [service]
    if service is None:
        services = SERVICES

    for service in services:
        proc = subprocess.run(
            [
                "docker",
                "compose",
                "--project-directory",
                ctx.obj["manifests_path"] / service,
                "ps",
                "-q",
                "backend",
            ],
            capture_output=True,
        )

        if proc.stdout:
            subprocess.run(
                [
                    "docker",
                    "compose",
                    "--project-directory",
                    ctx.obj["manifests_path"] / service,
                    "up",
                    "--build",
                    "--force-recreate",
                    "-d",
                    *containers,
                ],
            )

    subprocess.run(
        [
            "docker",
            "image",
            "prune",
            "--all",
            "--force",
        ],
    )


@cli.command()
@click.argument("service", type=service_type, required=False)
@click.argument("containers", type=container_type, nargs=-1)
@click.pass_context
def down(ctx, service, containers):
    """Stops a service/container"""
    services = [service]
    if service is None:
        services = SERVICES

    for service in services:
        subprocess.run(
            [
                "docker",
                "compose",
                "--project-directory",
                ctx.obj["manifests_path"] / service,
                "down",
                *containers,
            ],
        )


@cli.command()
@click.option("--unset", is_flag=True)
@click.option("--required", is_flag=True)
@click.argument("service", type=service_type)
@click.argument("key", required=False)
@click.argument("value", required=False)
@click.pass_context
def set_config(ctx, service, unset, required, key, value):
    """Set a config value"""
    if required and (key or value):
        click.secho("--required cannot be used when key or value is set", fg="red")
        sys.exit(1)

    env = ctx.obj["manifests_path"] / service / f"{get_network(ctx, service)}.env"
    env_data = dotenv.dotenv_values(env)

    override_env = ctx.obj["manifests_path"] / service / "override.env"
    override_env_data = dotenv.dotenv_values(override_env)

    if required:
        logging.info("audius-cli set-config required")
        for key, value in env_data.items():
            if not unset and value == "":
                value = click.prompt(
                    click.style(key, bold=True),
                    override_env_data.get(key, env_data.get(key)),
                )
                logging.info(f"> audius-cli set-config key={key!r} value={value!r}")
                dotenv.set_key(override_env, key, value)
            if unset and value == "":
                logging.info(f"> audius-cli set-config unset key={key!r}")
                dotenv.unset_key(override_env, key)
    else:
        if key is None:
            key = click.prompt(click.style("Key", bold=True))
        if not unset and value is None:
            value = click.prompt(click.style("Value", bold=True))

        if unset:
            logging.info(f"audius-cli set-config unset key={key!r}")
            dotenv.unset_key(override_env, key)
        else:
            logging.info(f"audius-cli set-config key={key!r} value={value!r}")
            dotenv.set_key(override_env, key, value)


@cli.command()
@click.argument("service", type=service_type)
@click.pass_context
def get_config(ctx, service):
    proc = subprocess.run(
        [
            "docker",
            "compose",
            "--project-directory",
            ctx.obj["manifests_path"] / service,
            "ps",
            "-q",
            "backend",
        ],
        capture_output=True,
    )

    # get from inside container if running otherwise fallback override.env
    if proc.stdout:
        subprocess.run(
            [
                "docker",
                "compose",
                "--project-directory",
                ctx.obj["manifests_path"] / service,
                "exec",
                "backend",
                "env",
            ]
        )
    else:
        env = ctx.obj["manifests_path"] / service / f"{get_network(ctx, service)}.env"
        env_data = dotenv.dotenv_values(env)
        override_env = ctx.obj["manifests_path"] / service / "override.env"
        override_env_data = dotenv.dotenv_values(override_env)
        current_env_data = {**env_data, **override_env_data}
        for key, value in current_env_data.items():
            print(f"{key}={value}")


@cli.command()
@click.option("--unset", is_flag=True)
@click.argument("tag", required=False)
@click.pass_context
def set_tag(ctx, unset, tag):
    """Set the commit tag"""
    if not unset and tag is None:
        tag = click.prompt(click.style("Tag", bold=True))

    if not unset:
        try:
            for commit in json.load(
                urllib.request.urlopen(
                    f"https://api.github.com/repos/AudiusProject/audius-protocol/commits?sha={tag}&per_page=10"
                )
            ):
                short_message = commit["commit"]["message"].split("\n")[0]
                click.echo(
                    f"{click.style(commit['sha'][:8], bold=True, fg='yellow')}: "
                    f"[{click.style(commit['commit']['author']['name'], bold=True, fg='blue')}] "
                    f"{short_message}"
                )
        except (ConnectionError, urllib.error.HTTPError, json.JSONDecodeError):
            click.secho("Failed to get commit messages", fg="red")

        click.confirm(
            click.style("Do you want to continue?", bold=True), abort=True, default=True
        )

    logging.info(f"audius-cli set-tag tag={tag!r}")
    for service in SERVICES:
        env_file = ctx.obj["manifests_path"] / service / ".env"

        if unset:
            logging.info(f"> audius-cli set-tag unset service={service!r}")
            dotenv.unset_key(env_file, "TAG")
        else:
            logging.info(f"> audius-cli set-tag service={service!r} tag={tag!r}")
            dotenv.set_key(env_file, "TAG", tag)


@cli.command()
@click.option("--unset", is_flag=True)
@click.argument("network", type=network_type, required=False)
@click.pass_context
def set_network(ctx, unset, network):
    """Set the deployment network"""
    if not unset and network is None:
        network = click.prompt(click.style("Network", bold=True))

    logging.info(f"audius-cli set-network network={network!r}")
    for service in SERVICES:
        env_file = ctx.obj["manifests_path"] / service / ".env"

        if unset:
            logging.info(f"> audius-cli set-network unset service={service!r}")
            dotenv.unset_key(env_file, "NETWORK")
        else:
            logging.info(
                f"> audius-cli set-network service={service!r} network={network!r}"
            )
            dotenv.set_key(env_file, "NETWORK", network)


@cli.command()
@click.argument("branch", required=False)
@click.pass_context
def pull(ctx, branch):
    """Pull latest updates from remote"""
    try:
        subprocess.run(["git", "fetch"], check=True, cwd=ctx.obj["manifests_path"])
        if branch:
            subprocess.run(
                ["git", "checkout", branch], check=True, cwd=ctx.obj["manifests_path"]
            )
        subprocess.run(["git", "pull"], check=True, cwd=ctx.obj["manifests_path"])
    except subprocess.CalledProcessError:
        click.secho("Could not pull", fg="red")
        sys.exit(1)


@cli.command()
@click.argument("branch", required=False)
@click.pass_context
def upgrade(ctx, branch):
    """Pulls from latest source and re-launches all running services"""
    ctx.forward(pull)

    for service in SERVICES:
        proc = subprocess.run(
            [
                "docker",
                "compose",
                "--project-directory",
                ctx.obj["manifests_path"] / service,
                "ps",
                "-q",
                "backend",
            ],
            capture_output=True,
        )

        # update if service is running
        if proc.stdout:
            subprocess.run(
                [
                    "docker",
                    "compose",
                    "--project-directory",
                    ctx.obj["manifests_path"] / service,
                    "pull",
                ],
            )

            subprocess.run(
                [
                    "docker",
                    "compose",
                    "--project-directory",
                    ctx.obj["manifests_path"] / service,
                    "up",
                    "-d",
                ],
            )

    subprocess.run(
        [
            "docker",
            "image",
            "prune",
            "--all",
            "--force",
        ],
    )


@cli.command()
@click.option("--remove", is_flag=True)
# random so nodes in the network stagger upgrades
@click.argument("cron-expression", default=f"{random.randint(0, 59)} * * * *")
@click.pass_context
def auto_upgrade(ctx, remove, cron_expression):
    """Setup auto upgrade with a cron job"""
    with crontab.CronTab(user=True) as cron:
        for job in cron.find_comment("audius-cli auto-upgrade"):
            cron.remove(job)

        if not remove:
            log_file = ctx.obj["manifests_path"] / "auto-upgrade.log"
            job = cron.new(
                (
                    f"date >> {log_file};"
                    f"/usr/local/bin/audius-cli upgrade >> {log_file} 2>&1;"
                ),
                "audius-cli auto-upgrade",
            )

            job.setall(cron_expression)


@cli.command()
@click.pass_context
def update_chainspec(ctx):
    """
    Prepares the discovery chainspec and static nodes, pulling from
    relevant environment variables.
    """
    env = ctx.obj["manifests_path"] / "discovery-provider" / f"{get_network(ctx, 'discovery-provider')}.env"
    env_data = dotenv.dotenv_values(env)

    # Get signers from env
    signers = env_data.get("audius_genesis_signers")

    # Compute extra data
    extra_data = f"{EXTRA_VANITY}{signers}{EXTRA_SEAL}"
    click.secho("Genesis EXTRA_DATA:", bold=True)
    click.secho(extra_data)

    # Update chainspec
    spec_input = ctx.obj["manifests_path"] / "discovery-provider" / "chain" / "spec_template.json"
    spec_output = ctx.obj["manifests_path"] / "discovery-provider" / "chain" / "spec.json"
    spec_data = json.load(open(spec_input))
    spec_data["genesis"]["extraData"] = extra_data
    with open(spec_output, "w") as f:
        json.dump(spec_data, f, ensure_ascii=False, indent=2)
        f.write("\n")
    click.secho("spec.json updated", fg="green")

    # Get peers from env
    peers_str = env_data.get("audius_static_nodes")
    peers = peers_str.split(",")
    click.secho("Static Nodes:", bold=True)
    click.secho(peers)

    static_peers_file = ctx.obj["manifests_path"] / "discovery-provider" / "chain" / "static-nodes.json"
    with open(static_peers_file, "w") as f:
        json.dump(peers, f, ensure_ascii=False, indent=2)
        f.write("\n")
    click.secho("static-nodes.json updated", fg="green")


if __name__ == "__main__":
    cli(obj={})
