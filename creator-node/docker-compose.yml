version: "3.9"

services:
  db:
    container_name: postgres
    image: postgres:15.5-bookworm
    shm_size: 2g
    restart: always
    entrypoint: >
        /bin/bash -c 
        "if [[ $$(tail -n 1 /var/lib/postgresql/data/pg_hba.conf) != 'hostnossl    all          all            0.0.0.0/0  trust' ]]; then
          echo 'hostnossl    all          all            0.0.0.0/0  trust' >> /var/lib/postgresql/data/pg_hba.conf;
        fi;
        /usr/local/bin/docker-entrypoint.sh postgres -c shared_buffers=2GB -c max_connections=500 -c shared_preload_libraries=pg_stat_statements -c listen_addresses='*'"
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      timeout: 5s
    ports:
      - '127.0.0.1:5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: audius_creator_node
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    volumes:
      - /var/k8s/creator-node-db-15:/var/lib/postgresql/data
    networks:
      - creator-node-network
    depends_on:
      db-upgrade:
        condition: service_healthy

  db-upgrade:
    container_name: db-upgrade
    image: tianon/postgres-upgrade:11-to-15
    volumes:
      - /var/k8s/creator-node-db:/var/lib/postgresql/11/data
      - /var/k8s/creator-node-db-15:/var/lib/postgresql/15/data
      - /var/k8s/mediorum:/tmp/mediorum
    environment:
      PGBINOLD: /usr/lib/postgresql/11/bin
      PGBINNEW: /usr/lib/postgresql/15/bin
      PGDATAOLD: /var/lib/postgresql/11/data
      PGDATANEW: /var/lib/postgresql/15/data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: audius_creator_node
    networks:
      - creator-node-network
    restart: "no" # Stay unhealthy (don't restart) until the upgrade is complete
    # Healthcheck to verify completion of the upgrade
    healthcheck:
      test: ["CMD-SHELL", "test -f /var/lib/postgresql/15/data/upgrade_complete"]
      interval: 30s
      timeout: 10s
      retries: 1000
    entrypoint: ["/bin/sh", "-c", "if [ ! -f /var/lib/postgresql/15/data/upgrade_complete ]; then docker-upgrade 2>&1 | tee /tmp/mediorum/pg_upgrade.txt && touch /var/lib/postgresql/15/data/upgrade_complete && tail -f /dev/null; fi && tail -f /dev/null"]

  db-upgrade-cleanup:
    container_name: db-upgrade-cleanup
    image: tianon/postgres-upgrade:11-to-15
    volumes:
      - /var/k8s/creator-node-db:/var/lib/postgresql/11/data
      - /var/k8s/creator-node-db-15:/var/lib/postgresql/15/data
    environment:
      PGBINOLD: /usr/lib/postgresql/11/bin
      PGBINNEW: /usr/lib/postgresql/15/bin
      PGDATAOLD: /var/lib/postgresql/11/data
      PGDATANEW: /var/lib/postgresql/15/data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: audius_creator_node
    networks:
      - creator-node-network
    restart: "no" # Stay unhealthy (don't restart) until the upgrade is complete
    # Healthcheck to verify completion of the upgrade
    healthcheck:
      test: ["CMD-SHELL", "test -f /var/lib/postgresql/15/data/upgrade_cleaned"]
      interval: 30s
      timeout: 10s
      retries: 1000
    entrypoint: ["/bin/sh", "-c", "if [ ! -f /var/lib/postgresql/15/data/upgrade_cleaned ]; then /usr/lib/postgresql/15/bin/vacuumdb --all --analyze-in-stages -h db -U postgres && rm -rf /var/lib/postgresql/11/data/* && touch /var/lib/postgresql/15/data/upgrade_cleaned && tail -f /dev/null; fi && tail -f /dev/null"]
    depends_on:
      db:
        condition: service_healthy

  cache:
    container_name: redis
    extends:
      file: ../common-services.yml
      service: base-redis
    networks:
      - creator-node-network

  autoheal:
    image: willfarrell/autoheal
    container_name: autoheal
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    environment:
      - AUTOHEAL_INTERVAL=10
      - CURL_TIMEOUT=30
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file

  vector:
    extends:
      file: ../common-services.yml
      service: vector
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - creator-node-network

  mediorum:
    image: audius/mediorum:${TAG:-7705e1c6cfb33066e3da4017ab1485c710672565}
    container_name: mediorum
    restart: unless-stopped
    networks:
      - creator-node-network
    ports:
      - "${MEDIORUM_PORT:-4000}:1991"
      - 127.0.0.1:6060:6060
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    volumes:
      - /var/k8s/mediorum:/tmp/mediorum
      - /var/k8s/creator-node-backend:/file_storage
    environment:
      - LOGSPOUT=ignore
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    depends_on:
      db:
        condition: service_healthy

  healthz:
    image: audius/healthz:${TAG:-7705e1c6cfb33066e3da4017ab1485c710672565}
    container_name: healthz
    restart: unless-stopped
    networks:
      - creator-node-network

  caddy:
    image: audius/caddy:2.7.4
    container_name: caddy
    restart: unless-stopped
    env_file:
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - creator-node-network
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - dashboard-dist:/dashboard-dist

  dashboard:
    image: audius/dashboard:${TAG:-7705e1c6cfb33066e3da4017ab1485c710672565}
    container_name: dashboard
    restart: unless-stopped
    command: ["sh", "-c", "npm run build:${NETWORK:-prod} && tail -f /dev/null"]
    networks:
      - creator-node-network
    volumes:
      - dashboard-dist:/app/dist

  uptime:
    image: audius/uptime:${TAG:-7705e1c6cfb33066e3da4017ab1485c710672565}
    container_name: uptime
    restart: unless-stopped
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - creator-node-network
    volumes:
      - /var/k8s/bolt:/bolt

networks:
  creator-node-network:

volumes:
  caddy_data:
  caddy_config:
  dashboard-dist:
