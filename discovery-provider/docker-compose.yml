version: "3.9"

services:
  db:
    container_name: postgres
    environment:
      POSTGRES_DB: audius_discovery
    extends:
      file: ../common-services.yml
      service: base-postgres
    volumes:
      - /var/k8s/discovery-provider-db:/var/lib/postgresql/data # Use k8s location for backward compatibility
    networks:
      - discovery-provider-network

  cache:
    container_name: redis
    restart: always
    extends:
      file: ../common-services.yml
      service: base-redis
    networks:
      - discovery-provider-network

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
    restart: always
    environment:
      - network.host=0.0.0.0
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - node.name=cluster1-node1
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms${ES_MEM:-2g} -Xmx${ES_MEM:-2g}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - discovery-provider-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail elasticsearch:9200/_cluster/health || exit 1"
        ]
      interval: 10s
      timeout: 5s

  relay:
    image: audius/relay:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    container_name: relay
    restart: unless-stopped
    networks:
      - discovery-provider-network
    environment:
      - ENVIRONMENT=${NETWORK}
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    ports:
      - "6001:6001"

  backend:
    container_name: server
    image: audius/discovery-provider:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    restart: always
    mem_limit: "${SERVER_MEM_LIMIT:-16000000000}"
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    labels:
      autoheal: "true"
    ports:
      - "5000:5000"
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    environment:
      - audius_discprov_infra_setup=audius-docker-compose
      - audius_no_workers=true
      - audius_db_run_migrations=false
      - audius_elasticsearch_run_indexer=false
    networks:
      - discovery-provider-network

  indexer:
    container_name: indexer
    image: audius/discovery-provider:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    restart: always
    mem_limit: 2.8g
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    labels:
      autoheal: "true"
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    environment:
      - audius_discprov_infra_setup=audius-docker-compose
      - audius_no_server=true
      - audius_db_run_migrations=true
      - audius_elasticsearch_run_indexer=true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pgrep -f pg_migrate.sh || pgrep -f celery || exit 1"
        ]
      interval: 5s
      timeout: 5s
      retries: 12
    networks:
      - discovery-provider-network

  seed:
    image: audius/discovery-provider:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    command: bash /usr/share/seed.sh ${NETWORK:-prod}
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    volumes:
      - ./seed.sh:/usr/share/seed.sh
    depends_on:
      db:
        condition: service_healthy
    networks:
      - discovery-provider-network
    profiles:
      - seed

  autoheal:
    image: willfarrell/autoheal
    container_name: autoheal
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - AUTOHEAL_INTERVAL=10
      - CURL_TIMEOUT=30

  vector:
    extends:
      file: ../common-services.yml
      service: vector
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - discovery-provider-network

  comms:
    image: audius/comms:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    container_name: comms
    command: discovery
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file

  trpc:
    image: audius/trpc:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    container_name: trpc
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    ports:
      - "2022:2022"

  chain:
    image: audius/nethermind:1.14.3
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail localhost:8545/health || exit 1"
        ]
    command: --config config
    container_name: chain
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    environment:
      # Use the delegate private key as the signer key for the chain.
      # Because the env_file is generated dynamically, default to blank string if not set
      # otherwise we will always see a warning.
      - NETHERMIND_KEYSTORECONFIG_TESTNODEKEY=${audius_delegate_private_key:-}
    volumes:
      - ./chain/spec.json:/config/spec.json
      - ./chain/static-nodes.json:/nethermind/Data/static-nodes.json
      - ./chain/config.cfg:/nethermind/configs/config.cfg
      - ./chain/NLog.config:/nethermind/NLog.config
      - /var/k8s/discovery-provider-chain/db/clique:/nethermind/nethermind_db/clique
      - /var/k8s/discovery-provider-chain/keystore:/nethermind/keystore
    labels:
      autoheal: "true"
    ports:
      - "30300:30300"
      - "30300:30300/udp"
      - "127.0.0.1:8545:8545"
    networks:
      - discovery-provider-network
    profiles:
      - chain
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file

  healthz:
    image: audius/healthz:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    container_name: healthz
    restart: unless-stopped
    networks:
      - discovery-provider-network

  caddy:
    image: audius/caddy:2.7.4
    container_name: caddy
    restart: unless-stopped
    env_file:
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - discovery-provider-network
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - dashboard-dist:/dashboard-dist

  dashboard:
    image: audius/dashboard:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    container_name: dashboard
    restart: unless-stopped
    command: ["sh", "-c", "npm run build:${NETWORK:-prod} && tail -f /dev/null"]
    networks:
      - discovery-provider-network
    volumes:
      - dashboard-dist:/app/dist

  uptime:
    image: audius/uptime:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    container_name: uptime
    restart: unless-stopped
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - discovery-provider-network
    volumes:
      - /var/k8s/bolt:/bolt

  # plugins
  notifications:
    image: audius/discovery-provider-notifications:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    container_name: notifications
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    profiles:
      - notifications
    ports:
      - "6000:6000"

  sla-auditor:
    image: audius/sla-auditor:${TAG:-f2a815007c0cba55f7db960530f536548f7ab401}
    container_name: sla-auditor
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    profiles:
      - sla-auditor
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file

  # blockscout plugin
  acdc-blockscout-db:
    image: postgres:13.6
    container_name: acdc-blockscout-db
    shm_size: 2g
    restart: always
    command: postgres -c shared_buffers=2GB -c max_connections=500 -c shared_preload_libraries=pg_stat_statements
    environment:
      POSTGRES_DB: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_USER: 'postgres'
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      timeout: 5s
    ports:
      - "127.0.0.1:5454:5432"
    deploy:
      mode: global
    volumes:
      - blockscout-db-data:/var/lib/postgresql/data
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    networks:
      - discovery-provider-network
    profiles:
      - block-explorer

  acdc-blockscout-redis:
    image: 'redis:alpine'
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'PING']
      interval: 10s
      timeout: 5s
    container_name: acdc-blockscout-redis
    command: redis-server
    volumes:
      - blockscout-redis-data:/data
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    networks:
      - discovery-provider-network
    profiles:
      - block-explorer

  acdc-blockscout-frontend:
    image: ghcr.io/blockscout/frontend:latest
    restart: unless-stopped
    container_name: acdc-blockscout-frontend
    environment:
      NEXT_PUBLIC_APP_HOST: 'blockscout1.staging.audius.co'
      NEXT_PUBLIC_NETWORK_NAME: 'ACDC Chain'
      NEXT_PUBLIC_NETWORK_ID: '1056801'
      NEXT_PUBLIC_API_HOST: 'blockscout1.staging.audius.co'
    ports:
      - "3000:3000"
    deploy:
      mode: global
    networks:
      - discovery-provider-network
    profiles:
      - block-explorer

  acdc-blockscout-backend:
    image: blockscout/blockscout:5.2.3
    restart: unless-stopped
    command: bash -c "while ! curl --fail --silent chain:8545/health; do sleep 1; done && bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    container_name: acdc-blockscout-backend
    environment:
      ETHEREUM_JSONRPC_VARIANT: 'nethermind'
      ETHEREUM_JSONRPC_HTTP_URL: 'chain:8545'
      CHAIN_ID: '1056801'
      INDEXER_DISABLE_INTERNAL_TRANSACTIONS_FETCHER: 'true'
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: 'true'
      DATABASE_URL: 'postgresql://postgres:postgres@acdc-blockscout-db:5432/postgres?sslmode=disable'
      ACCOUNT_REDIS_URL: 'redis://acdc-blockscout-redis:6379'
      ECTO_USE_SSL: false
      API_V2_ENABLED: 'true'
      MICROSERVICE_SC_VERIFIER_ENABLED: 'true'
      MICROSERVICE_SC_VERIFIER_URL: 'smart-contract-verifier:8050'
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    ports:
      - "4000:4000"
    depends_on:
      acdc-blockscout-db:
        condition: service_healthy
      acdc-blockscout-redis:
        condition: service_healthy
    volumes:
      - blockscout-logs:/app/logs/
    deploy:
      mode: global
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    networks:
      - discovery-provider-network
    profiles:
      - block-explorer

  smart-contract-verifier:
    image: ghcr.io/blockscout/smart-contract-verifier:${SMART_CONTRACT_VERIFIER_DOCKER_TAG:-latest}
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'smart-contract-verifier'
    networks:
      - discovery-provider-network
    profiles:
      - block-explorer

networks:
  discovery-provider-network:

volumes:
  esdata:
  caddy_data:
  caddy_config:
  dashboard-dist:
