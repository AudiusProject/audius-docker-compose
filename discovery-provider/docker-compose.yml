version: "3.9"

# used by audius-d devnet
x-extra-hosts: &extra-hosts
  extra_hosts:
    - "creator-1.devnet.audius-d:${HOST_DOCKER_INTERNAL:-172.100.0.1}"
    - "discovery-1.devnet.audius-d:${HOST_DOCKER_INTERNAL:-172.100.0.1}"
    - "identity.devnet.audius-d:${HOST_DOCKER_INTERNAL:-172.100.0.1}"
    - "eth-ganache.devnet.audius-d:${HOST_DOCKER_INTERNAL:-172.100.0.1}"
    - "acdc-ganache.devnet.audius-d:${HOST_DOCKER_INTERNAL:-172.100.0.1}"
    - "solana-test-validator.devnet.audius-d:${HOST_DOCKER_INTERNAL:-172.100.0.1}"

services:
  db:
    container_name: postgres
    image: postgres:15.5
    shm_size: 2g
    restart: always
    entrypoint: >
        /bin/bash -c
        "if [ -f /var/lib/postgresql/data/pg_hba.conf ]; then
          if [[ $$(tail -n 1 /var/lib/postgresql/data/pg_hba.conf) != 'hostnossl    all          all            0.0.0.0/0  trust' ]]; then
            echo 'hostnossl    all          all            0.0.0.0/0  trust' >> /var/lib/postgresql/data/pg_hba.conf;
          fi;
        fi;
        /usr/local/bin/docker-entrypoint.sh postgres -c shared_buffers=2GB -c max_connections=500 -c shared_preload_libraries=pg_stat_statements -c listen_addresses='*'"
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      timeout: 5s
    ports:
      - '${EXPOSE_POSTGRES:-127.0.0.1:5432}:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: audius_discovery
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    volumes:
      - /var/k8s/discovery-provider-db:/var/lib/postgresql/data
    networks:
      - discovery-provider-network

  optimize-db:
    container_name: optimize-db
    image: postgres:15.5-bookworm
    environment:
      - PGPASSWORD=postgres
    command: >
      sh -c "
      psql -h db -U postgres -d audius_discovery -c 'VACUUM FULL;' &&
      psql -h db -U postgres -d audius_discovery -c 'REINDEX DATABASE audius_discovery;' &&
      psql -h db -U postgres -d audius_discovery -c 'ANALYZE;' &&
      echo 'Database optimization completed'
      "
    networks:
      - discovery-provider-network
    profiles:
      - optimize-db

  cache:
    container_name: redis
    restart: always
    extends:
      file: ../common-services.yml
      service: base-redis
    networks:
      - discovery-provider-network

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
    restart: always
    environment:
      - network.host=0.0.0.0
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - node.name=cluster1-node1
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms${ES_MEM:-2g} -Xmx${ES_MEM:-2g}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - ${EXPOSE_ELASTICSEARCH:-127.0.0.1:39200}:9200
    networks:
      - discovery-provider-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail elasticsearch:9200/_cluster/health || exit 1"
        ]
      interval: 10s
      timeout: 5s

  relay:
    image: audius/relay:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: relay
    <<: *extra-hosts
    restart: unless-stopped
    networks:
      - discovery-provider-network
    environment:
      - ENVIRONMENT=${NETWORK}
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    ports:
      - "6001:6001"

  openresty:
    image: audius/discovery-provider-openresty:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: openresty
    <<: *extra-hosts
    restart: unless-stopped
    env_file:
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - discovery-provider-network
    ports:
      - "5000:5000"

  backend:
    container_name: server
    image: audius/discovery-provider:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    <<: *extra-hosts
    restart: always
    mem_limit: 8g
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      indexer:
        condition: service_healthy
    labels:
      autoheal: "true"
    ports:
      - "3000:3000"
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    environment:
      - audius_discprov_infra_setup=audius-docker-compose
      - audius_no_workers=true
      - audius_db_run_migrations=false
      - audius_elasticsearch_run_indexer=false
    networks:
      - discovery-provider-network

  indexer:
    container_name: indexer
    image: audius/discovery-provider:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    <<: *extra-hosts
    restart: always
    mem_limit: 8g
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    labels:
      autoheal: "true"
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    environment:
      - audius_discprov_infra_setup=audius-docker-compose
      - audius_no_server=true
      - audius_db_run_migrations=true
      - audius_elasticsearch_run_indexer=true
    healthcheck:
      test: >
        /bin/sh -c
        "if pgrep -af pg_migrate | grep -v 'pgrep -af pg_migrate' > /dev/null; then
            # Unhealthy if pg_migrate is found, excluding the pgrep command itself
            exit 1
        elif pgrep -af celery | grep -v 'pgrep -af celery' > /dev/null; then
            # Healthy if celery is found, excluding the pgrep command itself
            exit 0
        else
            # Unhealthy in all other cases
            exit 1
        fi"
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 120m
    networks:
      - discovery-provider-network

  seed:
    image: audius/discovery-provider:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    command: bash /usr/share/seed.sh ${NETWORK:-prod}
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    volumes:
      - ./seed.sh:/usr/share/seed.sh
    depends_on:
      db:
        condition: service_healthy
    networks:
      - discovery-provider-network
    profiles:
      - seed

  autoheal:
    image: willfarrell/autoheal
    container_name: autoheal
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - AUTOHEAL_INTERVAL=10
      - CURL_TIMEOUT=30

  vector:
    extends:
      file: ../common-services.yml
      service: vector
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - discovery-provider-network
    volumes:
      - /home/ubuntu/audius-docker-compose/auto-upgrade.log:/auto-upgrade.log

  comms:
    image: audius/comms:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: comms
    command: comms discovery
    <<: *extra-hosts
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file

  es-indexer:
    image: audius/es-indexer:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: es-indexer
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file

  trpc:
    image: audius/trpc:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: trpc
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    ports:
      - "2022:2022"

  chain:
    image: audius/nethermind:1.14.3
    container_name: chain
    <<: *extra-hosts
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail localhost:8545/health || exit 1"
        ]
    command: --config config
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    environment:
      # Use the delegate private key as the signer key for the chain.
      # Because the env_file is generated dynamically, default to blank string if not set
      # otherwise we will always see a warning.
      - NETHERMIND_KEYSTORECONFIG_TESTNODEKEY=${audius_delegate_private_key:-}
      - NETHERMIND_DISCOVERYCONFIG_BOOTNODES=${audius_static_nodes:-}
    volumes:
      - ./chain/spec.json:/config/spec.json
      - ./chain/static-nodes.json:/nethermind/Data/static-nodes.json
      - ./chain/config.cfg:/nethermind/configs/config.cfg
      - ./chain/NLog.config:/nethermind/NLog.config
      - /var/k8s/discovery-provider-chain/db/clique:/nethermind/nethermind_db/clique
      - /var/k8s/discovery-provider-chain/keystore:/nethermind/keystore
    labels:
      autoheal: "true"
    ports:
      - "30300:30300"
      - "30300:30300/udp"
      - "127.0.0.1:8545:8545"
    networks:
      - discovery-provider-network
    profiles:
      - chain
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file

  healthz:
    image: audius/healthz:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: healthz
    restart: unless-stopped
    networks:
      - discovery-provider-network

  caddy:
    image: audius/caddy:2.7.4
    container_name: caddy
    <<: *extra-hosts
    restart: unless-stopped
    env_file:
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - discovery-provider-network
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - dashboard-dist:/dashboard-dist

  dashboard:
    image: audius/dashboard:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}-${NETWORK:-prod}
    container_name: dashboard
    restart: unless-stopped
    environment:
      - NETWORK=${NETWORK:-prod}
    networks:
      - discovery-provider-network
    volumes:
      - dashboard-dist:/app/dist

  uptime:
    image: audius/uptime:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: uptime
    <<: *extra-hosts
    restart: unless-stopped
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    networks:
      - discovery-provider-network
    volumes:
      - /var/k8s/bolt:/bolt

  # plugins

  # === ddex ===

  ddex-web:
    image: audius/ddex-web:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: ddex-web
    restart: unless-stopped
    depends_on:
      ddex-mongo:
        condition: service_healthy
    environment:
      - NODE_ENV=${NETWORK:-prod}
      - DDEX_PORT=9000
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    env_file:
      - ${OVERRIDE_PATH:-override.env}
    ports:
      - "9000:9000"
    healthcheck:
      test: curl --fail -I http://localhost:9000/api/health_check || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - discovery-provider-network
    profiles:
      - ddex

  ddex-crawler:
    image: audius/ddex-ingester:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: ddex-crawler
    depends_on:
      ddex-mongo:
        condition: service_healthy
    environment:
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    entrypoint: ./ingester --service crawler
    networks:
      - discovery-provider-network
    profiles:
      - ddex

  ddex-indexer:
    image: audius/ddex-ingester:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: ddex-indexer
    depends_on:
      ddex-mongo:
        condition: service_healthy
    environment:
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    entrypoint: ./ingester --service indexer
    networks:
      - discovery-provider-network
    profiles:
      - ddex

  ddex-parser:
    image: audius/ddex-ingester:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: ddex-parser
    depends_on:
      ddex-mongo:
        condition: service_healthy
    environment:
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    entrypoint: ./ingester --service parser
    networks:
      - discovery-provider-network
    profiles:
      - ddex

  ddex-publisher:
    image: audius/ddex-publisher:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: ddex-publisher
    environment:
      - NODE_ENV=${NETWORK:-prod}
      - DDEX_PORT=9001
      - DDEX_MONGODB_URL=mongodb://mongo:mongo@ddex-mongo:27017/ddex?authSource=admin&replicaSet=rs0
    depends_on:
      ddex-mongo:
        condition: service_healthy
    ports:
      - "9001:9001"
    healthcheck:
      test: curl --fail -I http://localhost:9001/api/health_check || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - discovery-provider-network
    profiles:
      - ddex

  ddex-mongo:
    image: mongo:6.0.13
    container_name: ddex-mongo
    restart: always
    volumes:
      - /var/k8s/ddex-mongo-db:/data/db
      - ./ddex/mongo-keyfile:/etc/mongo-keyfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    command: mongod --replSet rs0 --bind_ip_all --keyFile /etc/mongo-keyfile
    ports:
      - "27017:27017"
    healthcheck:
      test: >
        bash -c 'mongosh --quiet --username "$$MONGO_INITDB_ROOT_USERNAME" --password "$$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "
          var ping = db.runCommand({ping: 1});
          if (!ping.ok) {
            exit(1);  // Unhealthy: MongoDB server not responding
          }
          var result = rs.status();
          if (result.ok && result.set) {
            exit(0);  // Healthy: MongoDB server is up and replica set is initiated
          } else {
            exit(1);  // Unhealthy: Replica set not initiated or not OK
          }
        "' localhost:27017/ddex
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    networks:
      - discovery-provider-network
    profiles:
      - ddex

  # === end ddex ===

  notifications:
    image: audius/discovery-provider-notifications:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: notifications
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file
    profiles:
      - notifications
    ports:
      - "6000:6000"

  sla-auditor:
    image: audius/sla-auditor:${TAG:-f0e5810a73b755ad60be006b762ff3e634e039bb}
    container_name: sla-auditor
    restart: unless-stopped
    networks:
      - discovery-provider-network
    env_file:
      - ${NETWORK:-prod}.env
      - ${OVERRIDE_PATH:-override.env}
    profiles:
      - sla-auditor
    logging:
      options:
        max-size: 10m
        max-file: 3
        mode: non-blocking
        max-buffer-size: 100m
      driver: json-file

  metabase:
    image: metabase/metabase:v0.48.0
    container_name: metabase
    hostname: metabase
    volumes:
      - /dev/urandom:/dev/random:ro
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: audius_discovery
      MB_DB_PORT: 5432
      MB_DB_USER: postgres
      MB_DB_PASS: postgres
      MB_DB_HOST: postgres
    networks:
      - discovery-provider-network
    ports:
      - "3000:3000"
    profiles:
      - metabase
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5


networks:
  discovery-provider-network:

volumes:
  esdata:
  caddy_data:
  caddy_config:
  dashboard-dist:
